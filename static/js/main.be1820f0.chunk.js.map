{"version":3,"sources":["components/input.jsx","components/playlist.jsx","components/markdown.jsx","App.js","reportWebVitals.js","index.js"],"names":["InputChannel","apikey","setPlaylist","useState","channelId","setChannelId","getData","a","uri","fetch","res","json","_","get","className","type","onKeyUp","e","target","value","onClick","Playlist","playlists","setVideolists","getListDetail","listId","getListDetailUri","map","list","title","Markdown","videolists","length","video","videoId","id","App","key","process","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAgCeA,EA7BM,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,YAAkB,EACdC,qBADc,mBACzCC,EADyC,KAC9BC,EAD8B,KAG1CC,EAAO,uCAAG,8BAAAC,EAAA,6DACVC,EADU,iFACsEJ,EADtE,gBACuFH,EADvF,2BAEEQ,MAAMD,GAFR,cAEVE,EAFU,gBAGFA,EAAIC,OAHF,OAGdD,EAHc,OAIdR,EAAYU,IAAEC,IAAIH,EAAK,QAAS,KAJlB,2CAAH,qDAOb,OACE,qCACE,oBAAII,UAAU,qBAAd,mBACA,sBAAKA,UAAU,gFAAf,UACE,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,oBAAf,yBACA,uBAAOA,UAAU,qBAAqBC,KAAK,OAAOC,QAAS,SAACC,GAAD,OAAOZ,EAAaY,EAAEC,OAAOC,aAG1F,wBAAQL,UAAU,kEAAkEM,QAAS,kBAAMd,KAAnG,uBAIF,oBAAIQ,UAAU,OAAd,SACE,gHCOOO,EA/BE,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,cAAetB,EAAa,EAAbA,OACtCuB,EAAa,uCAAG,WAAOC,GAAP,iBAAAlB,EAAA,6DAChBmB,EADgB,+EAC2EzB,EAD3E,uBACgGwB,GADhG,SAEJhB,MAAMiB,GAFF,cAEhBhB,EAFgB,gBAGRA,EAAIC,OAHI,OAGpBD,EAHoB,OAIpBa,EAAcX,IAAEC,IAAIH,EAAK,QAAS,KAJd,2CAAH,sDAOnB,OACE,qCACE,oBAAII,UAAU,qBAAd,wBACA,qBAAKA,UAAU,cAAf,SACGQ,EAAUK,KAAI,SAACC,GACd,IAAIH,EAASb,IAAEC,IAAIe,EAAM,KAAM,IAC3BC,EAAQjB,IAAEC,IAAIe,EAAM,gBAAiB,IACzC,OACE,qBAEER,QAAS,WACPI,EAAcC,IAEhBX,UAAU,uCALZ,SAOGe,GANIJ,YCDJK,EAhBE,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAClB,OACE,qCACE,oBAAIjB,UAAU,qBAAd,6BACCiB,EAAWC,OAAS,GACnB,qBAAKlB,UAAU,yCAAf,SACGiB,EAAWJ,KAAI,SAACM,GACf,IAAIJ,EAAQjB,IAAEC,IAAIoB,EAAO,gBAAiB,IACtCC,EAAUtB,IAAEC,IAAIoB,EAAO,6BAA8B,IACzD,OAAO,+CAA+BJ,EAA/B,6CAAyEK,EAAzE,MAAUD,EAAME,aCOpBC,MAdf,WACE,IAAMC,EAAMC,0CADC,EAEoBnC,mBAAS,IAF7B,mBAENmB,EAFM,KAEKpB,EAFL,OAGuBC,mBAAS,IAHhC,mBAGN4B,EAHM,KAGMR,EAHN,KAKb,OACE,sBAAKT,UAAU,gBAAf,UACE,cAAC,EAAD,CAAcb,OAAQoC,EAAKnC,YAAaA,IACxC,cAAC,EAAD,CAAUoB,UAAWA,EAAWC,cAAeA,EAAetB,OAAQoC,IACtE,cAAC,EAAD,CAAUN,WAAYA,QCFbQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.be1820f0.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport _ from 'lodash'\r\n\r\nconst InputChannel = ({ apikey, setPlaylist }) => {\r\n  const [channelId, setChannelId] = useState()\r\n\r\n  const getData = async () => {\r\n    let uri = `https://www.googleapis.com/youtube/v3/playlists?part=snippet&channelId=${channelId}&key=${apikey}&maxResults=50`\r\n    let res = await fetch(uri)\r\n    res = await res.json()\r\n    setPlaylist(_.get(res, 'items', []))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1 className=\"text-3xl mt-2 mb-2\">Input</h1>\r\n      <div className=\"space-y-1.5 bg-gray-100 p-3 inline-block rounded-2xl w-1/2 max-w-lg min-w-max\">\r\n        <div className=\"flex\">\r\n          <div className=\"w-24 inline-block\">channel id:</div>\r\n          <input className=\"border-2 flex-grow\" type=\"text\" onKeyUp={(e) => setChannelId(e.target.value)} />\r\n        </div>\r\n\r\n        <button className=\"border-2 border-gray-300 p-1 rounded-md float-right bg-gray-200\" onClick={() => getData()}>\r\n          Search\r\n        </button>\r\n      </div>\r\n      <ul className=\"mt-2\">\r\n        <li>channel id: https://www.youtube.com/channel/[channel id] e.g UCxxxxxxxxx</li>\r\n      </ul>\r\n    </>\r\n  )\r\n}\r\nexport default InputChannel\r\n","import React from 'react'\r\nimport _ from 'lodash'\r\n\r\nconst Playlist = ({ playlists, setVideolists, apikey }) => {\r\n  const getListDetail = async (listId) => {\r\n    let getListDetailUri = `https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&key=${apikey}&playlistId=${listId}`\r\n    let res = await fetch(getListDetailUri)\r\n    res = await res.json()\r\n    setVideolists(_.get(res, 'items', []))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1 className=\"text-3xl mt-2 mb-2\">Play lists</h1>\r\n      <div className=\"space-y-1.5\">\r\n        {playlists.map((list) => {\r\n          let listId = _.get(list, 'id', '')\r\n          let title = _.get(list, 'snippet.title', '')\r\n          return (\r\n            <div\r\n              key={listId}\r\n              onClick={() => {\r\n                getListDetail(listId)\r\n              }}\r\n              className=\"border-2 border-blue-300 bg-blue-100\"\r\n            >\r\n              {title}\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\nexport default Playlist\r\n","import React from 'react'\r\nimport _ from 'lodash'\r\n\r\nconst Markdown = ({ videolists }) => {\r\n  return (\r\n    <>\r\n      <h1 className=\"text-3xl mt-2 mb-2\">Videos markdown</h1>\r\n      {videolists.length > 0 && (\r\n        <div className=\"border-2 border-green-200 bg-green-100\">\r\n          {videolists.map((video) => {\r\n            let title = _.get(video, 'snippet.title', '')\r\n            let videoId = _.get(video, 'snippet.resourceId.videoId', '')\r\n            return <div key={video.id}>{`* [ ] [${title}](https://www.youtube.com/watch?v=${videoId})`}</div>\r\n          })}\r\n        </div>\r\n      )}\r\n    </>\r\n  )\r\n}\r\nexport default Markdown\r\n","import { useState } from 'react'\nimport InputChannel from './components/input'\nimport Playlist from './components/playlist'\nimport Markdown from './components/markdown'\n\nfunction App() {\n  const key = process.env.REACT_APP_GOOGLE_API_KEY\n  const [playlists, setPlaylist] = useState([])\n  const [videolists, setVideolists] = useState([])\n\n  return (\n    <div className=\"m-2 min-w-min\">\n      <InputChannel apikey={key} setPlaylist={setPlaylist} />\n      <Playlist playlists={playlists} setVideolists={setVideolists} apikey={key} />\n      <Markdown videolists={videolists} />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}